"use strict";(self.webpackChunk_scality_core_ui=self.webpackChunk_scality_core_ui||[]).push([[86832],{"./stories/toast.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomToast:()=>CustomToast,SimpleToast:()=>SimpleToast,ToastWithProgressBar:()=>ToastWithProgressBar,__namedExportsOrder:()=>__namedExportsOrder,default:()=>__WEBPACK_DEFAULT_EXPORT__});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__("./node_modules/react/index.js"),_src_lib__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__("./src/lib/components/text/Text.component.tsx"),_src_lib_components_buttonv2_Buttonv2_component__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__("./src/lib/components/buttonv2/Buttonv2.component.tsx"),_src_lib_components_icon_Icon_component__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__("./src/lib/components/icon/Icon.component.tsx"),_src_lib_components_toast_Toast_component__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__("./src/lib/components/toast/Toast.component.tsx"),react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__("./node_modules/react/jsx-runtime.js");function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,o)}return t}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach((function(r){_defineProperty(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function _defineProperty(obj,key,value){return(key=function _toPropertyKey(t){var i=function _toPrimitive(t,r){if("object"!=typeof t||!t)return t;var e=t[Symbol.toPrimitive];if(void 0!==e){var i=e.call(t,r||"default");if("object"!=typeof i)return i;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===r?String:Number)(t)}(t,"string");return"symbol"==typeof i?i:String(i)}(key))in obj?Object.defineProperty(obj,key,{value,enumerable:!0,configurable:!0,writable:!0}):obj[key]=value,obj}const __WEBPACK_DEFAULT_EXPORT__={parameters:{storySource:{source:"import React, { useState } from 'react';\nimport { BasicText } from '../src/lib';\nimport { Button } from '../src/lib/components/buttonv2/Buttonv2.component';\nimport { Icon } from '../src/lib/components/icon/Icon.component';\nimport {\n  Toast,\n  ToastProps,\n  useGetBackgroundColor,\n} from '../src/lib/components/toast/Toast.component';\n\nexport default {\n  title: 'Components/Feedback/Toast',\n  component: Toast,\n  tags: ['autodocs'],\n  argTypes: {\n    open: {\n      control: {\n        disable: true,\n      },\n    },\n    message: {\n      control: {\n        disable: true,\n        description: 'The message to display in the toast',\n      },\n    },\n    status: {\n      control: 'radio',\n      options: ['success', 'error', 'warning', 'info'],\n      description: 'The status of the toast',\n    },\n    position: {\n      control: 'select',\n      options: [\n        'top-center',\n        'top-left',\n        'top-right',\n        'bottom-center',\n        'bottom-left',\n        'bottom-right',\n      ],\n      description: 'The position of the toast',\n    },\n    autoDismiss: {\n      control: 'boolean',\n      description: 'Whether the toast should dismiss automatically',\n    },\n    duration: {\n      control: 'number',\n      description: 'The duration of the toast',\n    },\n    icon: {\n      control: {\n        disable: true,\n        description: 'The icon to display in the toast',\n      },\n    },\n    width: {\n      control: {\n        disable: true,\n        description: 'The width of the toast',\n      },\n    },\n    withProgressBar: {\n      control: 'boolean',\n      description: 'Whether the toast should display a progress bar',\n    },\n    progressColor: {\n      control: {\n        disable: true,\n      },\n    },\n    style: {\n      control: {\n        disable: true,\n      },\n    },\n  },\n};\n\nconst Template = (args: Omit<ToastProps, 'open' | 'onClose'>) => {\n  const [open, setOpen] = useState(false);\n  const color = useGetBackgroundColor(args.status || 'info');\n  const iconName =\n    args.status === 'error'\n      ? 'Times-circle'\n      : args.status === 'warning'\n      ? 'Exclamation-circle'\n      : args.status === 'success'\n      ? 'Check-circle'\n      : 'Info-circle';\n  return (\n    <div style={{ height: '30vh' }}>\n      {!open && (\n        <Button label={'Open my custom toast'} onClick={() => setOpen(true)} />\n      )}\n      <Toast\n        open={open}\n        onClose={() => setOpen(false)}\n        icon={<Icon name={iconName} color={color} />}\n        {...args}\n      />\n    </div>\n  );\n};\n\nexport const SimpleToast = {\n  render: (args) => {\n    const [open, setOpen] = useState(false);\n\n    const handleClick = () => {\n      setOpen(true);\n    };\n\n    return (\n      <div style={{ height: '30vh' }}>\n        {!open && <Button label={'Open simple toast'} onClick={handleClick} />}\n        <Toast\n          open={open}\n          message={<BasicText>{\"I'm a toast\"}</BasicText>}\n          onClose={() => setOpen(false)}\n          status=\"info\"\n          {...args}\n        />\n      </div>\n    );\n  },\n};\n\nexport const ToastWithProgressBar = {\n  ...SimpleToast,\n  args: {\n    message: <BasicText>{\"I'm a toast with a progress bar\"}</BasicText>,\n    withProgressBar: true,\n  },\n};\n\nexport const CustomToast: {\n  args?: Omit<ToastProps, 'open' | 'onClose'>;\n} = Template.bind({});\nCustomToast.args = {\n  message: <BasicText>{\"I'm a custom toast\"}</BasicText>,\n  status: 'info',\n};\n",locationsMap:{"simple-toast":{startLoc:{col:27,line:107},endLoc:{col:1,line:128},startBody:{col:27,line:107},endBody:{col:1,line:128}},"toast-with-progress-bar":{startLoc:{col:36,line:130},endLoc:{col:1,line:136},startBody:{col:36,line:130},endBody:{col:1,line:136}},"custom-toast":{startLoc:{col:17,line:81},endLoc:{col:1,line:105},startBody:{col:17,line:81},endBody:{col:1,line:105}}}}},title:"Components/Feedback/Toast",component:_src_lib_components_toast_Toast_component__WEBPACK_IMPORTED_MODULE_2__.y,tags:["autodocs"],argTypes:{open:{control:{disable:!0}},message:{control:{disable:!0,description:"The message to display in the toast"}},status:{control:"radio",options:["success","error","warning","info"],description:"The status of the toast"},position:{control:"select",options:["top-center","top-left","top-right","bottom-center","bottom-left","bottom-right"],description:"The position of the toast"},autoDismiss:{control:"boolean",description:"Whether the toast should dismiss automatically"},duration:{control:"number",description:"The duration of the toast"},icon:{control:{disable:!0,description:"The icon to display in the toast"}},width:{control:{disable:!0,description:"The width of the toast"}},withProgressBar:{control:"boolean",description:"Whether the toast should display a progress bar"},progressColor:{control:{disable:!0}},style:{control:{disable:!0}}}};var Template=args=>{var[open,setOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1),color=(0,_src_lib_components_toast_Toast_component__WEBPACK_IMPORTED_MODULE_2__.J)(args.status||"info"),iconName="error"===args.status?"Times-circle":"warning"===args.status?"Exclamation-circle":"success"===args.status?"Check-circle":"Info-circle";return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{style:{height:"30vh"},children:[!open&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib_components_buttonv2_Buttonv2_component__WEBPACK_IMPORTED_MODULE_3__.$n,{label:"Open my custom toast",onClick:()=>setOpen(!0)}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib_components_toast_Toast_component__WEBPACK_IMPORTED_MODULE_2__.y,_objectSpread({open,onClose:()=>setOpen(!1),icon:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib_components_icon_Icon_component__WEBPACK_IMPORTED_MODULE_4__.In,{name:iconName,color})},args))]})};Template.displayName="Template";var SimpleToast={render:args=>{var[open,setOpen]=(0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(!1);return(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsxs)("div",{style:{height:"30vh"},children:[!open&&(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib_components_buttonv2_Buttonv2_component__WEBPACK_IMPORTED_MODULE_3__.$n,{label:"Open simple toast",onClick:()=>{setOpen(!0)}}),(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib_components_toast_Toast_component__WEBPACK_IMPORTED_MODULE_2__.y,_objectSpread({open,message:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib__WEBPACK_IMPORTED_MODULE_5__.s4,{children:"I'm a toast"}),onClose:()=>setOpen(!1),status:"info"},args))]})}},ToastWithProgressBar=_objectSpread(_objectSpread({},SimpleToast),{},{args:{message:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib__WEBPACK_IMPORTED_MODULE_5__.s4,{children:"I'm a toast with a progress bar"}),withProgressBar:!0}}),CustomToast=Template.bind({});CustomToast.args={message:(0,react_jsx_runtime__WEBPACK_IMPORTED_MODULE_1__.jsx)(_src_lib__WEBPACK_IMPORTED_MODULE_5__.s4,{children:"I'm a custom toast"}),status:"info"},SimpleToast.parameters={...SimpleToast.parameters,docs:{...SimpleToast.parameters?.docs,source:{originalSource:"{\n  render: args => {\n    const [open, setOpen] = useState(false);\n    const handleClick = () => {\n      setOpen(true);\n    };\n    return <div style={{\n      height: '30vh'\n    }}>\n        {!open && <Button label={'Open simple toast'} onClick={handleClick} />}\n        <Toast open={open} message={<BasicText>{\"I'm a toast\"}</BasicText>} onClose={() => setOpen(false)} status=\"info\" {...args} />\n      </div>;\n  }\n}",...SimpleToast.parameters?.docs?.source}}},ToastWithProgressBar.parameters={...ToastWithProgressBar.parameters,docs:{...ToastWithProgressBar.parameters?.docs,source:{originalSource:'{\n  ...SimpleToast,\n  args: {\n    message: <BasicText>{"I\'m a toast with a progress bar"}</BasicText>,\n    withProgressBar: true\n  }\n}',...ToastWithProgressBar.parameters?.docs?.source}}},CustomToast.parameters={...CustomToast.parameters,docs:{...CustomToast.parameters?.docs,source:{originalSource:"(args: Omit<ToastProps, 'open' | 'onClose'>) => {\n  const [open, setOpen] = useState(false);\n  const color = useGetBackgroundColor(args.status || 'info');\n  const iconName = args.status === 'error' ? 'Times-circle' : args.status === 'warning' ? 'Exclamation-circle' : args.status === 'success' ? 'Check-circle' : 'Info-circle';\n  return <div style={{\n    height: '30vh'\n  }}>\n      {!open && <Button label={'Open my custom toast'} onClick={() => setOpen(true)} />}\n      <Toast open={open} onClose={() => setOpen(false)} icon={<Icon name={iconName} color={color} />} {...args} />\n    </div>;\n}",...CustomToast.parameters?.docs?.source}}};const __namedExportsOrder=["SimpleToast","ToastWithProgressBar","CustomToast"]}}]);