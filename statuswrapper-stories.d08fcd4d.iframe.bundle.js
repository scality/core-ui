"use strict";(self.webpackChunk_scality_core_ui=self.webpackChunk_scality_core_ui||[]).push([[66138],{"./stories/statuswrapper.stories.tsx":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{Default:()=>Default,Playground:()=>Playground,__namedExportsOrder:()=>__namedExportsOrder,default:()=>statuswrapper_stories});__webpack_require__("./node_modules/react/index.js");var _templateObject,_templateObject2,_templateObject3,styled_components_browser_esm=__webpack_require__("./node_modules/styled-components/dist/styled-components.browser.esm.js"),index_es=__webpack_require__("./node_modules/@fortawesome/react-fontawesome/index.es.js"),free_solid_svg_icons_index_es=__webpack_require__("./node_modules/@fortawesome/free-solid-svg-icons/index.es.js"),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");function _taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}var BadgeWrapper=styled_components_browser_esm.Ay.span(_templateObject||(_templateObject=_taggedTemplateLiteral(["\n  height: fit-content;\n  width: fit-content;\n  position: relative;\n  margin-right: 0.5rem;\n  display: inline-block;\n"]))),BadgeStyled=(0,styled_components_browser_esm.Ay)(index_es.FontAwesomeIcon)(_templateObject2||(_templateObject2=_taggedTemplateLiteral(["\n  ","\n"])),(props=>{var theme=props.theme;return(0,styled_components_browser_esm.AH)(_templateObject3||(_templateObject3=_taggedTemplateLiteral(["\n      background: ",";\n      border-radius: 50%;\n      color: ",";\n      position: absolute;\n      top: -25%;\n      right: -35%;\n      transform: scale(0.5);\n      box-shadow: 0px 2px 2px rgba(0, 0, 0, 0.25);\n    "])),theme.backgroundLevel1,theme.textSecondary)}));function StatusWrapper(_ref){var{status,children}=_ref,icon=(status=>{switch(status){case"warning":return free_solid_svg_icons_index_es.faExclamationCircle;case"critical":return free_solid_svg_icons_index_es.faTimesCircle;case"unknown":return free_solid_svg_icons_index_es.faQuestionCircle;default:return null}})(status);return(0,jsx_runtime.jsxs)(BadgeWrapper,{children:[children,null!==icon&&(0,jsx_runtime.jsx)(BadgeStyled,{icon})]})}StatusWrapper.displayName="StatusWrapper";try{StatusWrapper.displayName="StatusWrapper",StatusWrapper.__docgenInfo={description:"",displayName:"StatusWrapper",props:{status:{defaultValue:null,description:"",name:"status",required:!0,type:{name:"enum",value:[{value:'"warning"'},{value:'"healthy"'},{value:'"critical"'},{value:'"unknown"'}]}}}},"undefined"!=typeof STORYBOOK_REACT_CLASSES&&(STORYBOOK_REACT_CLASSES["src/lib/components/statuswrapper/Statuswrapper.component.tsx#StatusWrapper"]={docgenInfo:StatusWrapper.__docgenInfo,name:"StatusWrapper",path:"src/lib/components/statuswrapper/Statuswrapper.component.tsx#StatusWrapper"})}catch(__react_docgen_typescript_loader_error){}var statuswrapper_stories_templateObject,common=__webpack_require__("./stories/common.tsx"),Icon_component=__webpack_require__("./src/lib/components/icon/Icon.component.tsx"),Text_component=__webpack_require__("./src/lib/components/text/Text.component.tsx");var PreviewWrapper=(0,styled_components_browser_esm.Ay)(common.mO)(statuswrapper_stories_templateObject||(statuswrapper_stories_templateObject=function statuswrapper_stories_taggedTemplateLiteral(strings,raw){return raw||(raw=strings.slice(0)),Object.freeze(Object.defineProperties(strings,{raw:{value:Object.freeze(raw)}}))}(["\n  min-height: 0;\n"])));const statuswrapper_stories={parameters:{storySource:{source:"import React from 'react';\nimport { StatusWrapper } from '../src/lib/components/statuswrapper/Statuswrapper.component';\nimport { Wrapper, Title } from './common';\nimport styled from 'styled-components';\nimport { Icon } from '../src/lib/components/icon/Icon.component';\nimport {\n  BasicText,\n  SecondaryText,\n  LargerText,\n  EmphaseText,\n  StatusText,\n  SmallerText,\n  ChartTitleText,\n} from '../src/lib/components/text/Text.component';\nconst PreviewWrapper = styled(Wrapper)`\n  min-height: 0;\n`;\nexport default {\n  title: 'Components/Data Display/StatusWrapper',\n  component: StatusWrapper,\n  args: {\n    children: <Icon name={'Network'} color={'statusWarning'} />,\n  },\n  argTypes: {\n    children: {\n      control: false,\n      description: 'The element to apply the status to',\n      table: {\n        type: { summary: 'ReactNode' },\n      },\n    },\n  },\n};\n\nexport const Playground = {};\n\nexport const Default = {\n  render: ({}) => {\n    return (\n      <Wrapper>\n        <Title>Status Wrapper</Title>\n\n        <PreviewWrapper>\n          <BasicText>\n            <StatusWrapper status=\"healthy\">\n              <Icon name={'Network'} color={'statusHealthy'} />\n            </StatusWrapper>\n            This is a text\n          </BasicText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <SecondaryText>\n            <StatusWrapper status=\"unknown\">\n              <Icon name={'Network'} color={'infoPrimary'} />\n            </StatusWrapper>\n            This is a text\n          </SecondaryText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <LargerText>\n            <StatusWrapper status=\"warning\">\n              <Icon name={'Network'} color={'statusWarning'} />\n            </StatusWrapper>\n            This is a text\n          </LargerText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <EmphaseText>\n            <StatusWrapper status=\"critical\">\n              <Icon name={'Network'} color={'statusCritical'} />\n            </StatusWrapper>\n            This is a text\n          </EmphaseText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <StatusText>\n            <StatusWrapper status=\"unknown\">\n              <Icon name={'Node-backend'} color={'infoPrimary'} />\n            </StatusWrapper>\n            This is a text\n          </StatusText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <SmallerText>\n            <StatusWrapper status=\"warning\">\n              <Icon name={'Volume-backend'} color={'statusWarning'} />\n            </StatusWrapper>\n            This is a text\n          </SmallerText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <ChartTitleText>\n            <StatusWrapper status=\"critical\">\n              <Icon name={'Toolbox'} color={'statusCritical'} />\n            </StatusWrapper>\n            This is a text\n          </ChartTitleText>\n        </PreviewWrapper>\n      </Wrapper>\n    );\n  },\n};\n",locationsMap:{playground:{startLoc:{col:26,line:35},endLoc:{col:28,line:35},startBody:{col:26,line:35},endBody:{col:28,line:35}},default:{startLoc:{col:23,line:37},endLoc:{col:1,line:108},startBody:{col:23,line:37},endBody:{col:1,line:108}}}}},title:"Components/Data Display/StatusWrapper",component:StatusWrapper,args:{children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Network",color:"statusWarning"})},argTypes:{children:{control:!1,description:"The element to apply the status to",table:{type:{summary:"ReactNode"}}}}};var Playground={},Default={render:_ref=>{var{}=_ref;return(0,jsx_runtime.jsxs)(common.mO,{children:[(0,jsx_runtime.jsx)(common.hE,{children:"Status Wrapper"}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.s4,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"healthy",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Network",color:"statusHealthy"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.m$,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"unknown",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Network",color:"infoPrimary"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.zl,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"warning",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Network",color:"statusWarning"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.Tn,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"critical",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Network",color:"statusCritical"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.E3,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"unknown",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Node-backend",color:"infoPrimary"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.GE,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"warning",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Volume-backend",color:"statusWarning"})}),"This is a text"]})}),(0,jsx_runtime.jsx)(PreviewWrapper,{children:(0,jsx_runtime.jsxs)(Text_component.uO,{children:[(0,jsx_runtime.jsx)(StatusWrapper,{status:"critical",children:(0,jsx_runtime.jsx)(Icon_component.In,{name:"Toolbox",color:"statusCritical"})}),"This is a text"]})})]})}};Playground.parameters={...Playground.parameters,docs:{...Playground.parameters?.docs,source:{originalSource:"{}",...Playground.parameters?.docs?.source}}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"{\n  render: ({}) => {\n    return <Wrapper>\n        <Title>Status Wrapper</Title>\n\n        <PreviewWrapper>\n          <BasicText>\n            <StatusWrapper status=\"healthy\">\n              <Icon name={'Network'} color={'statusHealthy'} />\n            </StatusWrapper>\n            This is a text\n          </BasicText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <SecondaryText>\n            <StatusWrapper status=\"unknown\">\n              <Icon name={'Network'} color={'infoPrimary'} />\n            </StatusWrapper>\n            This is a text\n          </SecondaryText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <LargerText>\n            <StatusWrapper status=\"warning\">\n              <Icon name={'Network'} color={'statusWarning'} />\n            </StatusWrapper>\n            This is a text\n          </LargerText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <EmphaseText>\n            <StatusWrapper status=\"critical\">\n              <Icon name={'Network'} color={'statusCritical'} />\n            </StatusWrapper>\n            This is a text\n          </EmphaseText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <StatusText>\n            <StatusWrapper status=\"unknown\">\n              <Icon name={'Node-backend'} color={'infoPrimary'} />\n            </StatusWrapper>\n            This is a text\n          </StatusText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <SmallerText>\n            <StatusWrapper status=\"warning\">\n              <Icon name={'Volume-backend'} color={'statusWarning'} />\n            </StatusWrapper>\n            This is a text\n          </SmallerText>\n        </PreviewWrapper>\n\n        <PreviewWrapper>\n          <ChartTitleText>\n            <StatusWrapper status=\"critical\">\n              <Icon name={'Toolbox'} color={'statusCritical'} />\n            </StatusWrapper>\n            This is a text\n          </ChartTitleText>\n        </PreviewWrapper>\n      </Wrapper>;\n  }\n}",...Default.parameters?.docs?.source}}};const __namedExportsOrder=["Playground","Default"]}}]);